Lifelong Pretraining : Continually Adapting Language Models to Emerging Corpora Xisen Jin†1
Dejiao Zhang2 Henghui Zhu2 Wei Xiao2 Shang - Wen Li‡2 Xiaokai Wei2 Andrew Arnold2 Xiang Ren1 1 University of Southern California 2 AWS AI Labs { xisenjin,xiangren}@usc.edu { dejiaoz , henghui , weixiaow , shangwenl , xiaokaiw , anarnld } @amazon.com Domain - Incremental Research Paper Stream
Abstract All domains Pretrained language models ( PTLMs ) are typically learned over a large , static corpus and further fine - tuned for various downstream tasks .
However , when deployed in the real world , a PTLM - based model must deal with data distributions that deviate from what the PTLM was initially trained on .
In this paper , we study a lifelong language model pretraining challenge where a PTLM is continually updated so as to adapt to emerging data .
Over a domain - incremental research paper stream and a chronologically - ordered tweet stream , we incrementally pretrain a PTLM with different continual learning algorithms , and keep track of the downstream task performance ( after fine - tuning ) .
We evaluate PTLM ’s ability to adapt to new corpora while retaining learned knowledge in earlier corpora .
Our experiments show distillation - based approaches to be most effective in retaining downstream performance in earlier domains .
The algorithms also improve knowledge transfer , allowing models to achieve better downstream performance over the latest data , and improve temporal generalization when distribution gaps exist between training and evaluation because of time .
We believe our problem formulation , methods , and analysis will inspire future studies towards continual pretraining of language models .
1 BioComputer Materials Medical Science Science Physics Knowledge retention Chronologically - Ordered Tweet Stream Latest data 2014 2016 2018 2020
Adaptation & Temporal generalization Figure 1 : Two data streams created for studying lifelong language model pre - training .
We focus on evaluating knowledge retention on the domain - incremental research papers stream ; we focus on adaptation to the latest data and temporal generalization on the chronologically ordered tweet stream .
static and possibly “ outdated " PTLM may limit the model performance on downstream tasks , as the PTLM may no longer provide an effective model initialization ( Beltagy et al. , 2019 ; Müller et al. , 2020 ) .
Here we look to understand whether continuously adapting a PTLM to emerging data can yield gains on various downstream tasks , and how to achieve better downstream performance for such lifelong PTLM adaptation .
A number of recent works make attempts on adapting PTLMs to a new data domain .
Gururangan et al. ( 2020 ) ; Yao et al. ( 2021 ) adapt language models to corpora of different genres and topics and observe performance improvement in domainspecific downstream tasks .
Arumae et al. ( 2020 ) further show that by regularizing the parameters of PTLMs , the downstream tasks performance on the general domain can be preserved .
Another line of works focuses on temporal domain shift ( Hombaiah et al. , 2021 ) , which analyzes the effect of pretraining over up - to - date data to the downstream tasks .
Röttger and Pierrehumbert ( 2021 ) further study vocabulary composition approaches for improving adaptation to up - to - date corpora .
However , Introduction Pretrained language models ( PTLMs ) have achieved remarkable performance on benchmark datasets for a range of NLP tasks ( Liu et al. , 2019b ; Brown et al. , 2020 ) .
However , when deployed in the wild , NLP systems must deal with emerging data that have constantly shifting data distribution , different from the text corpora they were initially pretrained on — for example , when new data domains are introduced ( upper part of Fig . 1 ) ( Gururangan et al. , 2020 ) , or when the language uses and vocabulary change over time ( lower part of Fig . 1 ) ( Lazaridou et al. , 2021 ) .
Fine - tuning from a 1 Proceedings of BigScience Episode # 5 – Workshop on Challenges & Perspectives in Creating Large Language Models , pages 1 - 16 May 27 , 2022 c 2022 Association for Computational Linguistics  these work focus their study on adapting PTLM to a single new domain ; while in practice , corpora from distinct domains and time stamps may emerge sequentially .
Whether one can maintain a single , up - to - date PTLM remains an open problem .
Related to this , Lazaridou et al. ( 2021 ) study adaptation of PTLMs over temporal data streams , but solely focus on language modeling instead of fine - tuning performance .
It is also important to understand multiple aspects of the utility of lifelong PTLM pretraining , such as knowledge retention over all the seen data , and study what methods can improve the utility of PTLMs in such a continual pretraining process .
temporal generalization in the tweet stream .
We believe our problem formulation , evaluation setup , methods and analysis can inspire more future work on continual pretraining of language models .
2 Problem Formulation Here we present the problem formulation for lifelong pretraining of PTLM , provide details about the data stream construction process and downstream tasks , and introduce the evaluation protocol .
2.1 Lifelong Pretraining of PTLMs We consider the scenario where one needs to deploy and/or maintain NLP models over a sequence of T data domains .
At each time step t the model visits an unlabeled text corpus Dt from a domain with a data distribution P ( Dt ) .
The data distribution P ( Dt ) evolves as the time step t , forming a data stream D1 ..
T = { D1 , D2 , ... DT } .
In practice , the data domain shift can refer to the topic change of the text content ( from computer science research papers to biomedical papers ) , or temporal evolution of the text ( from past to recent tweets ) .
The task of lifelong pretraining of PTLM looks to continuously adapt a language model f as the model visits ( unlabeled ) text corpus Dt from the data stream D1 ..
T , in order to provide a good model initialization for fine - tuning on downstream tasks from the same domain .
With slight abuse in notations , we also use Dt to directly refer to a data domain .
Here , we assume a language model f is updated sequentially over each pretraining corpora Dt , without accessing the full earlier corpora { Di } i < t in the data stream D1 ..
T .
This aims to capture practical constraints such as privacy restriction for storing earlier data , or computation budget for training over all the text corpora in D1 .. T .
We use ft to denote the language model right after updating on the domain Dt .
In our study , f is a RoBERTa - base transformer ( Liu et al. , 2019b ) and the model ( f0 ) is initialized with pretrained RoBERTa weights .
The utility of the PTLMs { ft } is evaluated based on their fine - tuned model performance on various downstream tasks .
After updating on a domain Di , the model fi can be fine - tuned over downstream tasks from visited domains Dt where t ≤ i. We note the set of downstream tasks related to dot main Dt as St = { Stj } N j=1 , assuming the number of downstream tasks is Nt .
Note that in the finetuning stage , model ft has no access to any of the pretraining corpus D1 .. T .
In this paper , we formulate a Lifelong Language Model Pretraining task to simulate practical scenarios of maintaining and adapting a PTLM over emerging corpora , create a testbed ( along with pretraining data streams and downstream tasks ) for studying continual pretraining algorithms , and present a systematic evaluation protocol for measuring the progress made on this challenging problem ( see Figure 2 for an illustration ) .
We consider two types of text corpus sequences when constructing pretraining data streams , each of which simulates a representative use case and that has slightly different focuses on the evaluation : continuously learning a single model that is applicable to both old and new domains ; and improving the model ’s ability to handle latest data .
Specifically , we construct 1 ) a domain - incremental text stream that consists of academic papers published in four research fields , and 2 ) a temporal tweet stream that consists of tweets collected from four different years .
By conducting systematic experiments on these two data streams , we look to answer a series of analysis questions : 1 ) whether continual pretraining retains fine - tuning performance over earlier corpora compared to traditional offline pretraining , 2 ) whether pretraining improves downstream performance on the latest data , and 3 ) whether pretraining improves temporal generalization where training and evaluation have distribution gaps because of time .
To address the research questions above , we conduct a systematic evaluation of existing continual learning ( CL ) algorithms , spanning over modelexpansion based , memory - based , and distillationbased approaches .
Our results show distillationbased approaches are most effective in knowledge retention in the research paper stream , while simultaneously improve adaptation to latest data and 2  Continual Pretraining … 𝐷 ! 𝐷 " … 𝐷$ 𝐷 # 𝑓 # 𝑓 !
Old Latest Latest Old Latest Train Test Train Test Train Test 𝑆 " 𝑆 " 𝑆 ! 𝑆 ! 𝑆 " 𝑆 !
Knowledge Retention Adaptation to Latest Data Downstream Datasets Metrics Bio - Medicine Chemprot ( Vindahl , 2016 )
RCT - Sample ( Dernoncourt and Lee , 2017 ) ACL - ARC ( Jurgens et al. , 2018 ) SciERC ( Luan et al. , 2018 )
Synthesis ( Mysore et al. , 2019 ) MNER
( Olivetti et al. , 2020 ) Keyphrase ( Augenstein et al. , 2017 ) Hyponym ( Augenstein et al. , 2017 ) Micro - F1 Micro - F1 Macro - F1 Macro - F1 Macro - F1 Micro - F1 Macro - F1 Macro - F1 Comp .
Science Mat .
Science Fine - Tuning & Evaluation Old Domains Physics Table 1
: Summary of downstream datasets relevant to each domain in the research paper stream .
Temporal Generalization et al. , 2018 ) .
On two datasets , we report label ranking average precision scores ( a multi - label version of MRR ) of models ( Azeemi and Waheed , 2021 ) and Macro - F1 respectively .
The detailed dataset construction process is included in Appendix D. Figure 2 : Training , evaluation setups , and metrics of life long language model pretraining .
The model sequentially visits each corpus , and is fine - tuned on downstream datasets related to the domains of pretraining .
We evaluate knowledge retention and adaptation to new data with downstream fine - tuning performance on old and latest domains respectively .
Besides , we evaluate temporal generalization where training / test examples are drawn from different time steps .
2.3 Evaluation Protocol We consider three key aspects for evaluating the utility of the language models { ft } that are continuously updated over the data stream D1 .. T , also illustrated in Figure 2 : 1 ) knowledge retention and transfer over the pretraining corpora seen earlier ; 2 ) adaptation to the latest data domain , and 3 ) temporal generalization when training and evaluation data are from different time steps .
2.2 Data Streams & Downstream Datasets We construct data streams to simulate two representative scenarios of data domain shifts in practice ( also see Fig . 1 ): one domain - incremental stream to simulate the sequential changes of research paper areas ; and one chronologically - ordered stream to simulate tweets emerging over time .
Knowledge Retention .
A key utility of continual language model pretraining is to obtain a single model applicable to all domains .
We focus on the evaluation of the ability with the domainincremental paper stream , because for the tweet stream , the practical need of performance over outdated data is limited .
Knowledge retention is measured with the downstream task performance from earlier or the current domains that the pretrained model has visited .
More formally , for each pretrained model checkpoint in { fi } , we fine - tune fi over downstream tasks { St } where t ≤ i and evaluate the corresponding test set performance .
It is important that the models do not suffer from catastrophic forgetting ( Robins , 1995 ) , i.e. , significantly reduced helpfulness when fi is fine - tuned for downstream tasks St from earlier domains with t < i. Domain - incremental Paper Stream .
This paper stream consists of the full text of research papers published in four research areas : biomedical , computer science , material science , and physics , filtered from the S2ORC dataset1 , which are presented sequentially to the model .
For each domain , we evaluate downstream performance over two datasets .
The downstream tasks span over various tasks such as relation extraction and named entity recognition , and are summarized in Table 1 .
We detail these datasets in Appendix D. Chronologically - ordered Tweet Stream .
This tweet data stream consists of tweets from the year 2014 , 2016 , 2018 and 2020 , collected by the Archive Team2 and preprocessed following Nguyen et al. ( 2020 ) .
These four tweet corpora are presented sequentially to the language model following the chronological order of the tweet year .
For downstream tasks , we hold out 1 M tweets from each year ’s corpus to construct multi - label hashtag prediction datasets ( Gong and Zhang , 2016 ) and single - label emoji prediction datasets ( Barbieri Adaption to Latest Data Domain .
In certain scenarios , performance of downstream models over the latest data domain should be emphasized .
For example , classifiers in the tweet domain are usually trained and evaluated with up - to - date data for practical deployment .
Formally , we focus on the downstream task performance of models fine - tuned from the final pretrained model checkpoint fT , where the downstream tasks ST are also from the latest 1 We use the 20200705v1 version of the S2ORC dataset at https:// github.com/allenai/s2orc 2 https://archive.org/details/twitterstream 3  Adapters 𝑓 ! & % domain .
To succeed in these metrics , it is crucial for the model to transfer knowledge from earlier domains to the latest domain .
𝑔
" ! !
𝑔"#% ! 𝑔"#$
𝑓 !
Layer 𝑘 Memory Replay Temporal Generalization Ability .
We consider another practical fine - tuning scenario in the tweet stream where the model is trained on outdated data and evaluated on the latest data ( Rijhwani and Preotiuc - Pietro , 2020 ; Huang and Paul , 2018 ) , referred to as the temporal generalization ability .
Formally , we fine - tune the final pretrained model checkpoint fT over the training set of downstream tasks St from an earlier time step ( t < T ) , and evaluate on the test set of the downstream tasks ST from the latest time step T .
3 Layer 𝑘 + 1 Replay memory Memory Stream 𝑥 ' 𝑥 ( 𝑓 " Distillation + CL Replay memory { 𝑥 ( , 𝑥 ' } 𝑓 " 𝑓"#% Logit Distillation Rep. Distillation Contrast & SEED Distillation 𝑦"#% ~ 𝑦 " ℎ"#% ~ ℎ " 𝐵"#% ~ 𝐵 " Similarity matrix Figure 3 : Comparison of adapter , memory replay , and distillation - based continual learning algorithms .
Details of the methods are introduced in Sec .
3 . 3.2 Model - expansion and Regularization - based Methods We first introduce model - expansion based approaches , which add small trainable modules ( e.g. , multi - layer perceptron ) to the model per new domain while keeping other parts of the model frozen .
The Adapter approach is a representative approach that learns a set of “ adapter ” layers gt = { gtk } K k=1 for each domain Dt and each of the K transformer layers ( Houlsby et al. , 2019 ) .
We also experiment with a simple Layer Expansion approach , which learns separate top two layers of the transformer and the prediction head for each domain .
We also involve a regularization - based continual learning baseline , online EWC ( Schwarz et al. , 2018 ) , which directly penalize change of model parameters .
Methods Lifelong language model pretraining introduces novel challenges because of the large training sets and more comprehensive evaluation protocols compared to classification tasks .
We establish several strong baselines , and evaluate the performance of continual learning algorithms from different categories spanning over model - expansion , memorybased , and distillation - based approaches , We illustrate the approaches in Figure 3 . 3.1 Simple Baselines 3.3 Memory Replay Methods We also experiment with Experience Replay ( ER ) ( Chaudhry et al. , 2019 ) , which alleviates forgetting by storing a subset of earlier examples and periodically re - training ( replaying ) over them .
We maintain a fixed - size memory M ( 100k examples by default ) and populate the memory M each time pretraining on a domain Dt finishes with examples in the current domain .
We ensure M always contains a balanced sample of examples from all seen domains D1 .. t .
We replay a mini - batch of examples from the memory every 10 training steps .
We consider several simple baselines which continual learning algorithms will be compared against .
RoBERTa - base ( f0 ) corresponds to not pretraining on any of the domain - specific corpora .
By separately pretraining f0 on each corpus D1 , D2 , ... DT , we obtain T Task - Specific pretrained models .
We also pretrain f0 sequentially over D1 .. T , which we refer to as sequential pretraining .
While it allows knowledge transfer between domains compared to domain - specific models , without any continual learning algorithms , sequential pretraining is prone to catastrophic forgetting ( Robins , 1995 ) .
Finally , we randomly shuffle corpora from all domains D1 ..
T before pretraining , noted as Multi - Task Learning ( MTL ) .
MTL corresponds to an offline training paradigm that models new corpora by re - training over all corpora seen before .
The drawback is that it requires storing full data from earlier domains , and that it can be extremely costly to repetitively retrain over earlier data if new data keeps emerging .
3.4 Distillation - based CL Methods While knowledge distillation ( KD ) ( Hinton et al. , 2015 ) techniques have been studied intensively for pretrained language models ( Sun et al. , 2019 ) , applying them to continual learning has been underexplored outside image classification tasks ( Li and Hoiem , 2018 ; Rebuffi et al. , 2017 ; Hou et al. , 2018 ) .
Distillation based CL approaches store one previ4  ous model checkpoint of the model ( noted as ft−1 ) and regularize the differences between ft−1 and the current model ft .
We adapt several existing knowledge distillation techniques to PTLMs and utilize them for continual learning .
We note , while individual distillation techniques are not original , their adaptation to CL algorithms can be novel .
We perform distillation with examples from the current domain Dt and a replay memory M ( similar to ER ) .
Despite the potential gap between Dt and the training data of ft−1 , the approach allows utilizing more data for distillation .
Formally , each time the model receives a mini - batch of stream examples xs or a draws mini - batch of memory examples xm from M ( both noted as x ) , we collect certain outputs of the model ( e.g. , output logits or intermediate representations ) with ft−1 and ft .
We compute a distillation loss ` KD ( x , ft−1 , ft ) that penalizes the differences between the model outputs , and jointly optimize it with the masked language modeling loss ` MLM .
The final objective is written as ` = ` MLM + α`KD , where α is a hyperparameter to weight the distillation loss .
larities between sentences .
Then , we compute the intra - batch representational similarity matrices of sentence representations ( i.e. between each pair of examples in the mini - batch ) with ft−1 and ft , noted as Bt−1 and Bt , and the cross entropy P minimize PN t−1 t loss ` distill = − N1 N B i=1 j=1 ij log Bij Self - Supervised Distillation ( SEED ) .
SEED distillation proposed by ( Fang et al. , 2021 ) has a similar spirit as the contrastive distillation .
The only difference is that it distills representational similarity between the batch and a large set of other examples .
We leave the details of the algorithm in Appendix E.
We further combine SEED Distillationwith logit distillation and refer to the approach as SEED - Logit Distillation .
4 Results We summarize our findings over the created data streams .
We ask whether lifelong pretraining and continual learning algorthms are effective base on our evaluation protocol proposed in Sec . 2.3 .
Logit Distillation .
In logit distillation ( Hinton et al. , 2015 ) , we collect the output logits of ft and ft−1 , noted as yt and yt−1 respectively .
The distillation loss is computed as DKL ( yt , yt−1 ) , where DKL is the Kullback – Leibler divergence function .
4.1 Experiment Settings We use the RoBERTa - base model ( Liu et al. , 2019b ) , initialized with RoBERTa - base weights throughout the experiments .
We set the maximal sequence length to 128 and an effective training batch size of 2,048 .
On the research paper stream , models are trained for 8k steps in the first domain and 4k steps in the subsequent domains .
On the Tweet stream , we train the models for 4k steps in each domain .
These correspond to less than a single pass of data in each domain .
See Appendix A for detailed setups .
Representation Distillation .
We also consider minimizing the representational deviation of sentences between previous and current models ( Sun et al. , 2019 ; Jiao et al. , 2020 ) .
We extract the representation of each word of two models , noted 1 : N as h1 : N t−1 and ht , before the masked language modeling prediction head , where N is the length of the sentence .
Then , we compute MSE loss 1 : N − h1 : N ||2 as the distillation loss . ||ht−1
t 2 4.2 Contrastive Distillation .
In addition to output logits and hidden representations , we further look into representational similarity within a batch of examples as additional knowledge to distill .
The approach is adapted from ( Cha et al. , 2021 ) , which is originally studied for supervised image classification tasks .
We briefly introduce the adapted algorithm and leave the details in Appendix E. During continual pretraining , in addition to the language model pretraining objective , we add an unsupervised contrastive learning objective , namely the SimCSE ( Gao et al. , 2021 ) objective to encourage sentence representations to reflect semantic simi Domain Incremental Data Stream As we introduced in Sec . 2.2 , in the domain incremental research paper stream , we expect a model ft to perform well on all downstream tasks S1 .. t from domains D1 .. t .
In Table 2 , we report the performance of models on all downstream tasks S1 ..
T fine - tuned from the final pretraining checkpoint , fT .
We visualize more complete change of downstream task performance over different time steps of pretraining ( i.e. , , f1 , f2 , f3 , f4 ) in Fig . 4 .
We also report the log perplexity of masked language modeling ( MLM ) in Table 2 as additional information .
With these results , we address the research questions below .
5  Task D1 - Biomedical D2 - Computer Science D3 - Materials Science D4 - Physics Dataset Chemprot RCT - Sample MLM ACL - ARC SciERC MLM MNER
Synthesis MLM Keyphrase Hyponym MLM Roberta - base Sequential Pretraining 82.03±0.7 82.09±0.5 78.07±0.7 79.60±0.5 1.993 1.654 64.32±2.8 72.73±2.9 79.07±1.6 81.43±0.8 2.153 1.807 83.15±0.3 83.99±0.3 91.25±0.6 92.10±1.0 2.117 1.590 66.21±1.0 67.57±1.0 67.59±4.5 74.68±4.4 2.278 1.381
91.56±0.4 92.66±0.6 1.418 1.355 ER Online EWC Adapter Layer Expansion Logit - KD Rep - KD Contrast - KD SEED - KD SEED - Logit - KD Task - Specific LM MTL 82.73±0.3
81.83±0.2 83.30±0.4 83.74±0.3 83.39±0.4 82.34±0.3 82.29±0.5 82.78±0.3
83.72±0.4 83.74±0.3 82.91±1.6
79.98±0.3 78.84±0.5 80.41±0.4 81.10±0.5 81.21±0.1 79.59±0.5 79.92±0.4
80.38±0.4 81.05±0.2 81.10±0.5 80.67±0.4 1.737 1.655 1.417 1.210 1.392 1.684 1.722 1.720 1.391 1.210 1.289 72.50±1.0 71.81±2.6 69.32±3.5 65.17±2.9 73.70±3.4 71.17±2.5 71.15±1.1 69.98±2.4 69.90±4.5 72.20±2.6
69.46±1.8 81.64±1.1 80.79±0.5 80.22±1.5
79.35±0.8
81.92±0.8 78.78±1.1 80.49±1.6 81.61±0.7 83.03±0.6 81.24±1.7 81.12±0.8 1.857 1.803 1.633 1.756 1.699 1.810 1.856 1.829 1.703 1.629 1.616 83.99±0.4
83.43±0.4
83.91±0.3 82.48±0.4 83.96±0.3 84.13±0.3 83.26±0.4 82.99±0.4 83.28±0.5 84.02±0.2
83.92±0.3
92.65±0.4 91.89±0.5 91.69±0.6 92.33±1.0 92.20±1.0 92.02±0.8 92.62±0.7 92.35±0.7
92.87±1.0 1.621 1.571 1.522 1.389 1.425 1.585 1.612 1.609 1.428 66.11±1.1 66.70±0.6
66.23±1.4 65.70±1.1 64.75±1.1 65.96±1.6 65.95±1.7 65.35±1.0 65.96±1.5 65.95±1.1 65.37±1.6 72.82±4.3
72.98±6.0 69.65±4.5 73.34±3.7 71.29±3.6 73.93±5.5
72.26±3.1 74.79±4.1 71.92±5.5
69.43±4.5 73.31±5.2 1.391 1.388 1.554 1.534 1.460 1.389 1.428 1.401 1.460 1.426 1.418 Table 2 : Results on the Research Paper stream .
We report log perplexity of MLM and the performance of downstream models fine - tuned from the final checkpoint of the pretrained model ( t = 4 ) .
Performance of the best performing CL algorithm is marked bold .
|M | , k Does lifelong pretraining help retain knowledge across different domain corpora ?
We first examine whether task - specific or lifelong pretraining improves performance over domain - specific downstream tasks .
Comparing Task - Specific LMs with RoBERTa - base in Table 2 , we notice consistent performance improvements , especially on Biomedical and Computer Science domains ( D1 , D2 ) .
We also see Sequential Pretraining could consistently outperform RoBERTa - base .
However , the comparison between Sequential Pretraining and Task Specific LMs are mixed : on D1 , D2 , D3 , Sequential Pretraining could outperform Task - Specific LMs only except MNER ; while on the earliest biomedical domain ( D1 ) , Sequential Pretraining achieves substantially lower performance .
From Figure 4 , we see the performance of Sequential Pretraining on Chemprot and RCT ( from D1 ) drops significantly from t = 1 to 4 .
The results imply lifelong pretraining allows later domains to benefit from knowledge transfer from earlier domains , but the performance on earlier domains is limited because of forgetting .
100k , 10 100k , 100 10 M , 10 Chemprot RCT ACL - ARC SciERC MLM - D1,2 82.73 82.06 82.87 79.98 78.64 79.98 72.50 71.97 71.80 81.64 81.62 81.63 1.737/1.857 1.599/1.789 1.438/1.732 Table 3 : Downstream task and MLM performance of fT under different memory sizes |M | and the frequency of replay k ( replaying every k steps of training ) in ER .
Layer Expansion approach ) , likely because a great portion of the model is kept frozen .
In contrast , the memory - replay based approach ( ER ) allows training the full parameters of the model and has been shown to be highly effective in continual learning of classification tasks ( Wang et al. , 2019 ; Chaudhry et al. , 2019 ) .
However , we surprisingly find that ER could hardly improve over Sequential Pretraining except D1 .
A similar pattern can be found in the MLM perplexity .
We hypothesize that the positive effect of example replay has diminished because of the overfitting to the memory examples .
Table 3 summarizes the effect of tuning hyperpameters in ER .
When we reduce the frequency of replay ( from every 10 steps to 100 steps ) , the MLM performance improves , which implies reduced overfitting ; however , the performance of downstream task performance does not improve .
When we increase the size of the memory |M | from 100k to 10 M , the MLM perplexity also improves ; still , there are still no improvements in downstream tasks .
It may imply ER itself is not an effective approach for continual pretraining .
Unlike ER , distillation approaches utilize richer information such as output logits or representation similarity to preserve past knowledge .
We find either Logit KD or SEED - Logit KD to be most effective depending on the task , while Rep - KD and Contrastive - KD are less effective .
The best performing distillation approach improves F1 over Sequential Pretraining on downstream tasks from Does continual learning algorithms help retain knowledge in sequential pretraining ?
Next , we compare different kinds of CL algorithms and investigate the effect of CL algorithms in alleviating forgetting and improving knowledge transfer .
Table 2 shows that Online - EWC slightly improves MLM perplexity compared to Sequential PT , but brings no improvement to the fine - tuning performance .
We hypothesize that regularization directly in the parameter space as in Online - EWC is not effective when the parameter space is very high dimensional .
Adapter improves downstream task F1 scores on the bio - medical domain ( D1 ) by 1.2 % and 0.8 % , but does not outperform Sequential Pretraining in other domains ( similarly for Simple 6  100 84 80 Roberta - base Task - Specific MTL 82 81 Macro F1 83
Sequential ER Adapter Logit KD Rep KD Contrast KD 29.5 36.3 30.2 42.0 29.7 40.1 49.6 48.0 46.4 52.9 63.9 65.4 66.7 64.9 70.1 20 0 100 200 # .
Downstream Training Instances RoBERTa - base Sequential - PT MTL ER Logit - KD 500 Figure 5 : Performance of downstream models with vari ous number of training examples , exemplified with SciERC .
The models are fine - tuned from the final pretrained model ( f4 ) .
82 81 80 Roberta - base Task - Specific MTL 79
Sequential ER Adapter Logit KD Rep KD Contrast KD
The results have a positive implication that lifelong pretraining is not only more computationally efficient and requires less storage of past data , but may also improve the performance of pretraining .
SEED - Logit KD ( b ) RCT - Sample 75
Does lifelong pretraining make models more data efficient ?
In Table 5 , we further examine the performance of final pretrained models under different amounts of training examples .
We include full results in Appendix B. We find in general , performance improvements are more significant in the low - resource setup .
70 Roberta - base Task - Specific MTL 65 60 40 SEED - Logit KD ( a ) Chemprot 78 60 Sequential ER Adapter Logit KD Rep KD
Contrast KD SEED - Logit KD ( c ) ACL - ARC 84 82 80 Roberta - base Task - Specific MTL 78
Sequential ER Adapter Logit KD Rep KD Contrast KD Computational Costs .
We analyze computational costs of different CL algorithms and present additional experiments with controlled computational costs .
We find additional computational cost is necessary for performance improvement of distillation - based CL .
However , it is not possible to trade performance simply by investing more computation budget with arbitrary CL algorithms .
We leave detailed discussions in Appendix F. SEED - Logit KD ( d ) SciERC Figure 4 : Performance evolution of downstream models .
Models are fine - tuned from checkpoints of lifelong pretrained LMs at different time steps t.
For Chemprot and RCT - Sample from D1 , we use t ∈ { 1 , 2 , 3 , 4 } ; while for ACL - ARC and SciERC from D2 , t ∈ { 2 , 3 , 4 } .
Methods achieving the best performance at the end of training ( t = 4 ) is highlighted .
D1 , D2 at least by 1.0 % .
However , performance on D3 , D4 , which come later in the data stream , does not improve over Sequential Pretraining , possibly because the distillation loss term makes the model rigid in obtaining new knowledge .
4.3 Temporal Data Stream We conduct analysis on pretraining PTLM on chronologically - ordered tweet corpora , to understand whether lifelong pretraining helps adaptation to the latest data and improves temporal generalization ability .
The results are summarized in Table 4 .
What is the gap between lifelong pretraining and multi - task learning across all the domains ?
Multi - Task Learning refers to the offline training paradigm , which retrain PTLMs over all corpora ( D1 .. t ) each time a new corpus Dt becomes available .
We examine whether lifelong pretraining is comparable to multi - task pretraining in terms of performance .
From Table 2 and Figure 4 , we see Sequential Pretraining in general underperforms MTL except for the final domain .
However , certain CL approaches , such as Logit - Distillation , could improve over MTL on all downstream tasks from the first and the second domain .
We speculate the reason is that continual learning naturally provides a curriculum ( Xu et al. , 2020 ; Shi et al. , 2015 ) to models where each individual task is easier to learn .
Will LMs be outdated ?
We compare the performance of Task - Specific ( 2014 ) to the Task - Specific models pretrained on the year of downstream datasets ( noted as Task - Specific ( Latest ) ) and notice consistent improvements in downstream tasks in 2018 and 2020 ( first two columns in Table 4 ) .
Sequential Pretraining could also outperform the Task - Specific ( 2014 ) model .
It verifies that language models may get outdated , which can be addressed by task - specific or lifelong pretraining over the latest corpora .
Does lifelong pretraining help improve the downstream model ’s performance on latest data ?
We show that downstream model ’s performance over 7  Years 2018 ( D3 ) RoBERTa - base Sequential PT ER Logit - KD Contrast - KD SEED - KD SEED - Logit - KD 48.08±1.0 56.79±0.5 56.93±0.1 58.21±0.5
57.94±0.4 56.87±0.2 57.75±0.4 2020 ( D4 )
Hashtag Prediction Task - Specific ( 2014 ) Task - Specific ( Latest ) MTL 56.16±0.6
56.61±0.4
57.89±0.4 56.42±0.2
59.85±0.4 59.56±1.7 60.52±0.2
59.54±0.3 59.71±0.2 60.74±0.6
59.59±0.3 59.87±0.6 59.95±0.3 Emoji Prediction RoBERTa - base Sequential PT ER Logit - KD Contrast - KD SEED - KD SEED - Logit - KD Task - Specific ( 2014 ) Task - Specific ( Latest ) MTL 25.71±0.1 29.30±0.1 29.50±0.1 29.77±0.1 29.48±0.2
30.12±0.1
29.98±0.1
28.94±0.0 29.06±0.2 29.52±0.2
24.42±0.2 27.69±0.1 27.75±0.1 27.80±0.1 27.72±0.3 27.66±0.1
27.84±0.2
26.98±0.2 27.19±0.1
27.47±0.0 2014 ( D1 ) → 2020 ( D4 ) 2016 ( D2 ) → 2020 ( D4 ) 39.31±2.7 44.00±1.1 43.31±0.2
44.26±0.9 45.22±0.1 43.39±0.4 45.35±0.6
42.23±2.7 49.87±1.8 50.72±0.6
50.92±0.8 52.14±1.1 49.62±1.0 51.56±0.7
12.02±0.4 14.20±0.2
14.36±0.4 14.20±0.3
14.42±0.3 14.36±0.1
14.36±0.1
13.24±0.2 16.08±1.4
16.82±0.3 16.28±1.1 17.52±0.1
16.97±0.4
16.97±0.3 44.34±0.6 43.44±0.5 44.04±0.3 13.39±0.2
13.00±0.2
14.07±0.2 5 Related Works Domain and Temporal Adaptation of Language Models .
Gururangan et al. ( 2020 ) study adaptation of PTLMs to domain - specific corpora .
Arumae et al. ( 2020 ) study algorithms to mitigate forgetting in original PTLMs , but does not investigate forgetting that happens over a sequence of domains .
Maronikolakis and Schütze ( 2021 ) ; Röttger and Pierrehumbert ( 2021 ) ; Luu et al. ( 2021 ) proposes sequential pretraining over domains or emerging data , but did not investigate CL algorithms .
Several recent studies have demonstrated the necessity of adapting LMs over time ( Lazaridou et al. , 2021 ) while specifically focusing on factual knowledge ( Dhingra et al. , 2021 ; Jang et al. , 2021 ) .
49.26±0.7 49.41±1.1 50.37±0.3
15.14±0.2 14.48±0.3
16.64±0.2 Continual Learning Algorithms in NLP .
Continual learning in NLP has mainly been studied for classification tasks .
An effective approach is to utilize a number of stored past examples ( de Masson d’Autume et al. , 2019 ; Wang et al. , 2020 ) , or pseudo examples ( e.g. , the ones generated with a PTLM ( Sun et al. , 2020 ; Kanwatchara et al. , 2021 ) ) .
Recent extensions of the algorithm ( Chuang et al. , 2020 ) perform knowledge distillation with generated pseudo examples .
Other lines of works focus on regularization over the sentence representations ( Wang et al. , 2019 ; Huang et al. , 2021 ; Liu et al. , 2019a ) or directly merging models in the parameter space ( Matena and Raffel , 2021 ) .
Model expansion - based approaches ( Liu et al. , 2019a ; Pfeiffer et al. , 2021 ) , including learning domain specific expert models ( Gururangan et al. , 2021 ) , are also actively studied .
Table 4 : Results on temporal data stream .
We show fine tuning performance over years 2018 and 2020 ( D3 , D4 ) and the Temporal generalization from 2014 or 2016 to 2020 data ( D1 → D4 , D2 → D4 ) on Twitter Hashtag and Emoji prediction datasets .
Models are fine - tuned from the final pre - trained model fT .
Full results are included in Appendix C. later data ( D3 , D4 ) can be improved over TaskSpecific models when continual learning algorithms are applied .
From the first two columns of Table 4 , we see Logit - KD and SEED - KD improve Hashtag prediction score over data of years 2018 and 2020 .
SEED - Logit KD further improves prediction F1 on Emoji prediction .
Note that these findings are in contrast to the research paper stream , where CL algorithms do not improve performance in the latest domain D4 .
The reason can be the higher similarity between domains in the tweet corpora making the knowledge transfer easier , which is further discussed in Appendix H. 6 Conclusion In this paper , we formulated the lifelong language model pretraining problem and constructed two data streams associated with downstream datasets .
We evaluated knowledge retention , adaptation to the latest data , and temporal generalization ability of continually pretrained language models .
Our experiments show distillation - based approaches being most effective in these evaluation setups .
A limitation of the work is that it has not been fully addressed whether there exists a variant of distillation - based CL approach that consistently outperforms Logit - KD .
Based on the current observation , we conclude the performance of different KD approaches for CL is highly task - dependent .
It asks for more future works into continual learning algorithms within the proposed problem setup .
Does lifelong pretraining improve temporal generalization ?
Temporal generalization evaluates downstream performance over latest test data when fine - tuned over outdated training data .
We show lifelong pretraining brings clear improvement to temporal generalization .
From Table 4 , we see even Sequential Pretraining could improve over the model pretrained merely on the year 2020 data ( Task - Specific ( 2020 ) ) consistently .
We find performance further improves with CL algorithms applied .
SEED - Logit - KD performs best in general on crossyear hashtag prediction tasks .
In crossyear emoji prediction , we find Contrast - KD and SEEDKD perform best .
We also find that SEED - LogitKD could slightly outperform Logit - KD .
8  References Yung - Sung Chuang , Shang - Yu Su , and Yun - Nung Chen . 2020 .
Lifelong language knowledge distillation .
In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing ( EMNLP ) , pages 2914–2924 , Online .
Association for Computational Linguistics .
Kristjan Arumae , Qing Sun , and Parminder Bhatia . 2020 .
An empirical investigation towards efficient multi - domain language model pre - training .
In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing ( EMNLP ) , pages 4854–4864 , Online .
Association for Computational Linguistics .
Cyprien de Masson d’Autume , Sebastian Ruder , Lingpeng Kong , and Dani Yogatama .
2019 .
Episodic memory in lifelong language learning .
In Advances in Neural Information Processing Systems 32 : Annual Conference on Neural Information Processing Systems 2019 , NeurIPS 2019 , December 8 - 14 , 2019 , Vancouver , BC , Canada , pages 13122–13131 .
Isabelle Augenstein , Mrinal Das , Sebastian Riedel , Lakshmi Vikraman , and Andrew McCallum . 2017 .
SemEval 2017 task 10 : ScienceIE - extracting keyphrases and relations from scientific publications .
In Proceedings of the 11th International Workshop on Semantic Evaluation ( SemEval-2017 ) , pages 546–555 , Vancouver , Canada .
Association for Computational Linguistics .
Franck Dernoncourt and Ji Young Lee . 2017 .
PubMed 200k RCT : a dataset for sequential sentence classification in medical abstracts .
In Proceedings of the Eighth International Joint Conference on Natural Language Processing ( Volume 2 : Short Papers ) , pages 308–313 , Taipei , Taiwan .
Asian Federation of Natural Language Processing .
Abdul Hameed Azeemi and Adeel Waheed . 2021 .
Covid-19 tweets analysis through transformer language models .
ArXiv , abs/2103.00199 .
Francesco Barbieri , Jose Camacho - Collados , Francesco Ronzano , Luis Espinosa - Anke , Miguel Ballesteros , Valerio Basile , Viviana Patti , and Horacio Saggion . 2018 .
SemEval 2018 task 2 : Multilingual emoji prediction .
In Proceedings of The 12th International Workshop on Semantic Evaluation , pages 24–33 , New Orleans , Louisiana .
Association for Computational Linguistics .
Jacob Devlin , Ming - Wei Chang , Kenton Lee , and Kristina Toutanova . 2019 .
BERT : Pre - training of deep bidirectional transformers for language understanding .
In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics : Human Language Technologies , Volume 1 ( Long and Short Papers ) , pages 4171–4186 , Minneapolis , Minnesota .
Association for Computational Linguistics .
Iz Beltagy , Kyle Lo , and Arman Cohan . 2019 .
SciBERT : A pretrained language model for scientific text .
In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing ( EMNLP - IJCNLP ) , pages 3615 – 3620 , Hong Kong , China .
Association for Computational Linguistics .
Bhuwan Dhingra , Jeremy R. Cole , Julian Martin Eisenschlos , D. Gillick , Jacob Eisenstein , and William W. Cohen . 2021 .
Time - aware language models as temporal knowledge bases .
ArXiv , abs/2106.15110 . Zhiyuan Fang , Jianfeng Wang , Lijuan Wang , L. Zhang , Yezhou Yang , and Zicheng Liu . 2021 .
Seed : Self - supervised distillation for visual representation .
ArXiv , abs/2101.04731 .
Tom B. Brown , Benjamin Mann , Nick Ryder , Melanie Subbiah , Jared Kaplan , Prafulla Dhariwal , Arvind Neelakantan , Pranav Shyam , Girish Sastry , Amanda Askell , Sandhini Agarwal , Ariel Herbert - Voss , Gretchen Krueger , Tom Henighan , Rewon Child , Aditya Ramesh , Daniel M. Ziegler , Jeffrey Wu , Clemens Winter , Christopher Hesse , Mark Chen , Eric Sigler , Mateusz Litwin , Scott Gray , Benjamin Chess , Jack Clark , Christopher Berner , Sam McCandlish , Alec Radford , Ilya Sutskever , and Dario Amodei . 2020 .
Language models are few - shot learners .
In Advances in Neural Information Processing Systems 33 : Annual Conference on Neural Information Processing Systems 2020 , NeurIPS 2020 , December 6 - 12 , 2020 , virtual .
Tianyu Gao , Xingcheng Yao , and Danqi Chen . 2021 .
Simcse :
Simple contrastive learning of sentence embeddings .
ArXiv , abs/2104.08821 .
Yuyun Gong and Qi Zhang .
2016 .
Hashtag recommendation using attention - based convolutional neural network .
In Proceedings of the Twenty - Fifth International Joint Conference on Artificial Intelligence , IJCAI 2016 , New York , NY , USA , 9 - 15 July 2016 , pages 2782–2788 .
IJCAI / AAAI Press .
Suchin Gururangan , Michael Lewis , Ari Holtzman , Noah A. Smith , and Luke Zettlemoyer . 2021 .
Demix layers : Disentangling domains for modular language modeling .
ArXiv , abs/2108.05036 . Hyuntak Cha , Jaeho Lee , and Jinwoo Shin . 2021 .
Co2l : Contrastive continual learning .
ArXiv , abs/2106.14413 .
Suchin Gururangan , Ana Marasović , Swabha Swayamdipta , Kyle Lo , Iz Beltagy , Doug Downey , and Noah A. Smith . 2020 .
Do n’t stop pretraining : Adapt language models to domains and tasks .
In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics , pages Arslan Chaudhry , Marcus Rohrbach , Mohamed Elhoseiny , Thalaiyasingam Ajanthan , Puneet K Dokania , Philip HS Torr , and Marc’Aurelio Ranzato . 2019 .
On tiny episodic memories in continual learning .
arXiv preprint arXiv:1902.10486 .
9  Kasidis Kanwatchara , Thanapapas Horsuwan , Piyawat Lertvittayakumjorn , Boonserm Kijsirikul , and Peerapon Vateekul . 2021 .
Rational LAMOL :
A rationale - based lifelong learning framework .
In Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing ( Volume 1 : Long Papers ) , pages 2942 – 2953 , Online .
Association for Computational Linguistics . 8342–8360 , Online .
Association for Computational Linguistics .
Geoffrey E. Hinton , Oriol Vinyals , and J. Dean . 2015 .
Distilling the knowledge in a neural network .
ArXiv , abs/1503.02531 .
Spurthi Amba Hombaiah , Tao Chen , Mingyang Zhang , Michael Bendersky , and Marc - Alexander Najork . 2021 .
Dynamic language models for continuously evolving content .
Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery & Data Mining .
Angeliki Lazaridou , A. Kuncoro , E. Gribovskaya , Devang Agrawal , Adam Liska , Tayfun Terzi , Mai Gimenez , Cyprien de Masson d’Autume , Sebastian Ruder , Dani Yogatama , Kris Cao , Tomás Kociský , Susannah Young , and P. Blunsom . 2021 .
Assessing temporal generalization in neural language models .
NeurIPS .
Saihui Hou , Xinyu Pan , Chen Change Loy , Zilei Wang , and Dahua Lin . 2018 .
Lifelong learning via progressive distillation and retrospection .
In ECCV .
Neil Houlsby , Andrei Giurgiu , Stanislaw Jastrzebski , Bruna Morrone , Quentin de Laroussilhe , Andrea Gesmundo , Mona Attariyan , and Sylvain Gelly .
2019 .
Parameter - efficient transfer learning for NLP .
In Proceedings of the 36th International Conference on Machine Learning , ICML 2019 , 9 - 15 June 2019 , Long Beach , California , USA , volume 97 of Proceedings of Machine Learning Research , pages 2790–2799 .
PMLR .
Zhizhong Li and Derek Hoiem .
2018 .
Learning without forgetting .
IEEE Transactions on Pattern Analysis and Machine Intelligence , 40:2935–2947 .
Tianlin Liu , Lyle Ungar , and João Sedoc . 2019a .
Continual learning for sentence representations using conceptors .
In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics : Human Language Technologies , Volume 1 ( Long and Short Papers ) , pages 3274–3279 , Minneapolis , Minnesota .
Association for Computational Linguistics .
Xiaolei Huang and Michael J. Paul . 2018 .
Examining temporality in document classification .
In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics ( Volume 2 : Short Papers ) , pages 694–699 , Melbourne , Australia .
Association for Computational Linguistics .
Yinhan Liu , Myle Ott , Naman Goyal , Jingfei Du , Mandar Joshi , Danqi Chen , Omer Levy , Mike Lewis , Luke Zettlemoyer , and Veselin Stoyanov . 2019b .
Roberta : A robustly optimized bert pretraining approach .
ArXiv , abs/1907.11692 .
Yufan Huang , Yanzhe Zhang , Jiaao Chen , Xuezhi Wang , and Diyi Yang . 2021 .
Continual learning for text classification with information disentanglement based regularization .
In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics : Human Language Technologies , pages 2736–2746 , Online .
Association for Computational Linguistics .
Kyle Lo , Lucy Lu Wang , Mark Neumann , Rodney Kinney , and Daniel Weld . 2020 .
S2ORC : The semantic scholar open research corpus .
In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics , pages 4969–4983 , Online .
Association for Computational Linguistics .
Joel Jang , Seonghyeon Ye , Sohee Yang , Joongbo Shin , Janghoon Han , Gyeonghun Kim , Stanley Jungkyu Choi , and Minjoon Seo . 2021 .
Towards continual knowledge learning of language models .
arXiv preprint arXiv:2110.03215 .
Yi Luan , Luheng He , Mari Ostendorf , and Hannaneh Hajishirzi . 2018 .
Multi - task identification of entities , relations , and coreference for scientific knowledge graph construction .
In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing , pages 3219–3232 , Brussels , Belgium .
Association for Computational Linguistics .
Xiaoqi Jiao , Yichun Yin , Lifeng Shang , Xin Jiang , Xiao Chen , Linlin Li , Fang Wang , and Qun Liu . 2020 .
TinyBERT : Distilling BERT for natural language understanding .
In Findings of the Association for Computational Linguistics : EMNLP 2020 , pages 4163–4174 , Online .
Association for Computational Linguistics .
Kelvin Luu , Daniel Khashabi , Suchin Gururangan , Karishma Mandyam , and Noah A. Smith . 2021 .
Time waits for no one !
analysis and challenges of temporal misalignment .
David Jurgens , Srijan Kumar , Raine Hoover , Dan McFarland , and Dan Jurafsky . 2018 .
Measuring the evolution of a scientific field through citation frames .
Transactions of the Association for Computational Linguistics , 6:391–406 .
Antonis Maronikolakis and Hinrich Schütze . 2021 .
Multidomain pretrained language models for green NLP .
In Proceedings of the Second Workshop on Domain Adaptation for NLP , pages 1–8 , Kyiv , Ukraine .
Association for Computational Linguistics .
10  Jonathan Schwarz , Wojciech Czarnecki , Jelena Luketina , Agnieszka Grabska - Barwinska , Yee Whye Teh , Razvan Pascanu , and Raia Hadsell . 2018 .
Progress & compress : A scalable framework for continual learning .
In Proceedings of the 35th International Conference on Machine Learning , ICML 2018 , Stockholmsmässan , Stockholm , Sweden , July 10 - 15 , 2018 , volume 80 of Proceedings of Machine Learning Research , pages 4535–4544 .
PMLR .
Michael Matena and Colin Raffel . 2021 .
Merging models with fisher - weighted averaging .
ArXiv , abs/2111.09832 .
Martin Müller , Marcel Salathé , and Per Egil Kummervold . 2020 .
Covid - twitter - bert : A natural language processing model to analyse covid-19 content on twitter .
ArXiv , abs/2005.07503 .
Sheshera Mysore , Zachary Jensen , Edward Kim , Kevin Huang , Haw - Shiuan Chang , Emma Strubell , Jeffrey Flanigan , Andrew McCallum , and Elsa Olivetti . 2019 .
The materials science procedural text corpus : Annotating materials synthesis procedures with shallow semantic structures .
In Proceedings of the 13th Linguistic Annotation Workshop , pages 56–64 , Florence , Italy .
Association for Computational Linguistics .
Yangyang Shi , Martha Larson , and Catholijn M. Jonker . 2015 .
Recurrent neural network language model adaptation with curriculum learning .
Comput .
Speech Lang . , 33:136–154 .
Fan - Keng Sun , Cheng - Hao Ho , and Hung - Yi Lee . 2020 .
LAMOL :
language modeling for lifelong language learning .
In 8th International Conference on Learning Representations , ICLR 2020 , Addis Ababa , Ethiopia , April 26 - 30 , 2020 .
OpenReview.net .
Dat Quoc Nguyen , Thanh Vu , and Anh Tuan Nguyen .
2020 .
BERTweet : A pre - trained language model for English tweets .
In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing : System Demonstrations , pages 9 – 14 , Online .
Association for Computational Linguistics .
Siqi Sun , Yu Cheng , Zhe Gan , and Jingjing Liu .
2019 .
Patient knowledge distillation for BERT model compression .
In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing ( EMNLP - IJCNLP ) , pages 4323–4332 , Hong Kong , China .
Association for Computational Linguistics .
Elsa A Olivetti , Jacqueline M Cole , Edward Kim , Olga Kononova , Gerbrand Ceder , Thomas Yong - Jin Han , and Anna M Hiszpanski . 2020 .
Data - driven materials research enabled by natural language processing and information extraction .
Applied Physics Reviews , 7(4):041317 .
Jens Vindahl . 2016 .
Chemprot-3.0 : a global chemical biology diseases mapping .
Jonas Pfeiffer , Aishwarya Kamath , Andreas Rücklé , Kyunghyun Cho , and Iryna Gurevych . 2021 .
AdapterFusion : Non - destructive task composition for transfer learning .
In Proceedings of the 16th Conference of the European Chapter of the Association for Computational Linguistics : Main Volume , pages 487–503 , Online .
Association for Computational Linguistics .
Hong Wang , Wenhan Xiong , Mo Yu , Xiaoxiao Guo , Shiyu Chang , and William Yang Wang .
2019 .
Sentence embedding alignment for lifelong relation extraction .
In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics : Human Language Technologies , Volume 1 ( Long and Short Papers ) , pages 796–806 , Minneapolis , Minnesota .
Association for Computational Linguistics .
Sylvestre - Alvise Rebuffi , Alexander Kolesnikov , Georg Sperl , and Christoph H. Lampert . 2017 .
icarl : Incremental classifier and representation learning .
In 2017 IEEE Conference on Computer Vision and Pattern Recognition , CVPR 2017 , Honolulu , HI , USA , July 21 - 26 , 2017 , pages 5533–5542 .
IEEE Computer Society .
Zirui Wang , Sanket Vaibhav Mehta , Barnabas Poczos , and Jaime Carbonell . 2020 .
Efficient meta lifelonglearning with limited memory .
In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing ( EMNLP ) , pages 535–548 , Online .
Association for Computational Linguistics .
Shruti Rijhwani and Daniel Preotiuc - Pietro . 2020 .
Temporally - informed analysis of named entity recognition .
In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics , pages 7605–7617 , Online .
Association for Computational Linguistics .
Benfeng Xu , Licheng Zhang , Zhendong Mao , Quan Wang , Hongtao Xie , and Yongdong Zhang .
2020 .
Curriculum learning for natural language understanding .
In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics , pages 6095–6104 , Online .
Association for Computational Linguistics .
Anthony V. Robins .
1995 .
Catastrophic forgetting , rehearsal and pseudorehearsal .
Connect .
Sci . , 7:123 – 146 .
Yunzhi Yao , Shaohan Huang , Wenhui Wang , Li Dong , and Furu Wei . 2021 .
Adapt - and - distill : Developing small , fast and effective pretrained language models for domains .
In Findings of the Association for Computational Linguistics : ACL - IJCNLP 2021 , pages 460–470 , Online .
Association for Computational Linguistics .
Paul Röttger and J. Pierrehumbert .
2021 .
Temporal adaptation of bert and performance on downstream document classification : Insights from social media .
Findings of EMNLP .
11  100 Micro F1 80 60 53.5 53.4 47.1 49.8 51.1 55.0 58.5 58.8 59.4 63.6 70.7 70.4 71.5 69.3 74.3 20 100 200 # .
Downstream Training Instances 500 ( a ) Chemprot 100 Macro F1 80 60 40 29.5 36.3 30.2 42.0 29.7 40.1 49.6 48.0 46.4 52.9 63.9 65.4 66.7 64.9 70.1 20 0 100 200 # .
Downstream Training Instances RoBERTa - base Sequential - PT MTL ER Logit - KD ( b ) SciERC number of training examples .
The models are fine - tuned from the final pretrained model ( f4 ) .
Detailed Experiment Settings We use a linearly decreasing learning rate initialized with 5e-4 on the research paper stream and 3e-4 on the tweet stream .
On the research paper stream , we train the model for 8,000 steps in the first task , and 4,000 steps in the subsequent tasks .
On the tweet stream , we train the model for 8,000 steps in all tasks .
We hold out 128,000 sentences from each corpus to evaluate MLM performance .
As the size of pretraining corpora is large , during training , each training example is visited only once .
We use the masked language modeling perplexity over held - out validation sets of the pretraining corpora as the metrics for hyperparameter tuning .
Common hyperparameters such as learning rate and batch sizes are tuned with Task - specific models with the first task .
Hyperparameters that are specific to continual learning algorithms , such as the scale of the distillation loss , is tuned using the first two domains in the stream according to the MLM performance over validation sets .
The weight of the distillation term α is set as 1.0 for logit distillation and 0.1 for other distillation algorithms .
By default , we replay or perform distillation with a mini - batch of examples from the replay memory every 10 training steps in ER and Distillationbased CL approaches .
We use the huggingface transformers library https://github.com/ huggingface / transformers for implementation .
B 2016 2018 2020
RoBERTa - base Sequential PT ER Adapter Logit - KD Rep - KD Contrast - KD SEED - KD SEED - Logit - KD Task - Specific ( 2014 ) Task - Specific ( Latest )
MTL 56.65±0.6 59.00±0.1 59.00±0.1 58.76±0.7 60.93±0.5 60.47±0.1 60.72±0.6
58.82±0.4 61.28±0.2
61.62±0.3
59.91±0.3 60.51±0.3
45.50±2.1
54.28±0.3 54.90±0.2 52.55±1.5 55.96±0.2
51.77±2.6
55.85±0.0 54.55±0.5 55.59±0.5 55.38±0.6 55.47±1.0 55.16±1.6 48.08±1.0 56.79±0.5 56.93±0.1 54.34±1.7 58.21±0.5
55.79±1.4
57.94±0.4 56.87±0.2 57.75±0.4
56.16±0.6
56.61±0.4
57.89±0.4 56.42±0.2
59.85±0.4 59.56±1.7
59.01±1.0
60.52±0.2 59.80±0.2
59.54±0.3 59.71±0.2 60.74±0.6
59.59±0.3 59.87±0.6
59.95±0.3 RoBERTa - base Sequential PT ER Adapter Logit - KD Rep - KD Contrast - KD SEED - KD SEED - Logit - KD Task - Specific ( 2014 ) Task - Specific ( Latest ) MTL 28.73±0.2
32.69±0.2 32.88±0.2
32.15±0.2
33.08±0.3 32.71±0.2
32.90±0.1 32.91±0.1
33.28±0.1 33.37±0.2
32.31±0.0 32.78±0.1
26.86±0.2
30.55±0.3 30.52±0.2
29.85±0.0 30.88±0.1
30.51±0.2
31.01±0.1
30.84±0.3 31.17±0.1 30.54±0.3 29.83±0.5
30.54±0.0 25.71±0.1 29.30±0.1 29.50±0.1 28.72±0.0 29.77±0.1 29.45±0.1 29.48±0.2 30.12±0.1 29.98±0.1
28.94±0.0 29.06±0.2 29.52±0.2 24.42±0.2 27.69±0.1
27.75±0.1 26.80±0.3 27.80±0.1 27.27±0.2 27.72±0.3 27.66±0.1
27.84±0.2
26.98±0.2 27.19±0.1
27.47±0.0 Emoji Prediction 500 Figure 6 : Performance of downstream models with various A 2014 Hashtag Prediction RoBERTa - base Sequential - PT MTL ER Logit - KD 40 0
Task Table 5 : Full performance on Twitter Hashtag prediction and Emoji prediction , fine - tuned from the pre - trained model in the final time step .
using different amount of downstream training examples .
We see on Chemprot and SciERC , the benefit of Sequential Pretraining over RoBERTa - base is more significant in low - resource fine - tuning setups .
Whenever Seqential Pretraining outperforms RoBERTa - base , we notice Logit - KD could further improve over Sequential Pretraining .
C
Full Results over the Tweet Stream Tables 5 and 6 summarize full results over the Tweet stream .
Compared to the table 4 in the main text , we add downstream performance over data from years 2014 and 2016 ( D1 , D2 ) , and temporal generalization from year 2014 to 2020 ( D1 → D4 ) .
D Dataset Details
The research paper stream consists of full text of 6.6 M , 12.1 M , 7.8 M , and 7.5 M research papers from the S2ORC ( Lo et al. , 2020 ) dataset .
We evaluate downstream fine - tuning performance on two in - domain datasets for each research area :
Chemprot relation exaction dataset ( Vindahl , 2016 ) and RCT abstract sentence role labeling dataset ( Dernoncourt and Lee , 2017 ) for the bio - medical domain ; ACL - ARC citation intent classification dataset ( Jurgens et al. , 2018 ) and SciERC relation extraction dataset ( Luan et al. , 2018 ) for the Low - Resource Fine - Tuning Figure 6 summarizes the performance of fine - tuned models from the final model checkpoint ( t = 4 ) 12  Task 2014 → 2020 2016 → 2020 2018 → 2020
39.31±2.7 44.00±1.1 43.31±0.2 42.61±0.5
44.26±0.9 42.48±0.2 45.22±0.1 43.39±0.4
45.35±0.6 44.34±0.6 43.44±0.5 44.34±0.6
44.04±0.3
42.23±2.7 49.87±1.8 50.72±0.6 48.00±1.6 50.92±0.8
50.38±1.5 52.14±1.1 49.62±1.0 51.56±0.7 49.26±0.7 49.41±1.1
51.78±0.7 50.37±0.3 37.19±2.1
46.63±0.9 46.27±0.4 42.63±0.9
46.84±1.0 42.23±0.2 47.47±0.8
46.37±0.8 47.74±0.3 45.09±0.7
44.34±0.4 44.69±0.7
44.31±0.0
12.02±0.4 14.20±0.2
14.36±0.4 13.53±0.2
14.20±0.3 13.89±0.1
14.42±0.3
14.36±0.1
14.36±0.1
13.39±0.2
13.00±0.2
12.90±0.4 14.07±0.2
13.24±0.2 16.08±1.4
16.82±0.3 15.68±0.3 16.28±1.1 16.03±0.3 17.52±0.1
16.97±0.4
16.97±0.3 15.14±0.2 14.48±0.3
14.85±0.3 16.64±0.2 18.67±0.1
21.06±0.9 21.57±0.1 20.64±0.1 21.29±1.0
20.86±0.2 21.43±0.1
21.88±0.3 21.62±0.1
20.79±0.3 19.30±0.2
19.83±0.2 20.94±0.7 Crossyear Hashtag Prediction RoBERTa - base Sequential PT ER Adapter Logit - KD Rep - KD Contrast - KD SEED - KD SEED - Logit - KD Task - Specific ( 2014 ) Task - Specific ( 2020 ) -
4x steps MTL Crossyear Emoji Prediction RoBERTa - base Sequential PT ER Adapter Logit - KD Rep - KD Contrast - KD SEED - KD SEED - Logit - KD Task - Specific ( 2014 ) Task - Specific ( 2020 ) - 4x steps MTL sets , which results 10k examples in each of the data splits .
For emoji prediction , we construct 20way single - label emoji prediction datasets for each year following Barbieri et al. ( 2018 ) with the 1 M held out tweets .
We sample 5,000 tweets per emoji in each split , resulting in balanced datasets of the same size as the hashtag prediction datasets .
E Details of Continual Learning Algorithms E.1
Contrastive Distillation During continual pretraining , in addition to the language model pretraining objective , we add a unsupervised contrastive learning objective , namely the SimCSE ( Gao et al. , 2021 ) objective , so that the similarity in the sentence representation better reflects the semantic similarity in the sentence .
We use the l2 -normalized representation of the startof - sequence token at the final layer as the sentence representation , noted as h.
Then , we distill the intra - batch representational similarity from the previous model ft−1 to the current model ft .
Given a mini - batch of N examples x , we compute the representational dot - product similarity matrix between normalized sentence representations h between each pair of examples with ft−1 and ft , noted as Bt−1 and Bt , where each element Bij is , Table 6 : Temporal generalization performance on Twitter Hashtag prediction datasets fine - tuned from the final pretrained model .
Year 1→Year 2 indicates the hashtag prediction model is fine - tuned on data in year Year 1 , and evaluated on test data in Year 2 .
computer science domain ; relation extraction over Synthesis procedures ( Mysore et al. , 2019 ) and named entity recognition over material science papers ( MNER ) ( Olivetti et al. , 2020 ) for material science domain ; keyphrase classification and hyponym classification after filtering out physics papers for the physics domain ( Augenstein et al. , 2017 ) .
We report micro - averaged F1 on Chemprot , RCT , MNER datasets following the evaluation metrics in the original work , and report macroaveraged F1 on all other datasets .
We use the official data splits for all datasets except for RCT , where we employ a low - resource training setup following Gururangan et al. ( 2020 ) .
where τ is a temperature hyperparameter .
We specify a temperature τt = 0.05 for the teacher model ft−1 and a temperature τs for the student model ft = 0.01 .
We compute the cross - entropy between Bt−1 and Bt as the distillation loss , The pretraining corpora for the tweet stream consist of 25 M tweets in each year .
For downstream tasks , we use a separate set of 1 M tweets from each year to construct multi - label hashtag prediction ( Gong and Zhang , 2016 ) datasets and singlelabel emoji prediction datasets ( Barbieri et al. , 2018 ) .
We replace user names to special tokens .
For Hashtag prediction , the label space consists of tweets containing 200 most frequent hashtags in each year .
We independently sample 500 tweets per label ( hashtag ) as training , validation and test SEED distillation proposed by ( Fang et al. , 2021 ) has a similar spirit as the contrastive distillation with differences in the examples used for computing similarity matrices computes .
The algorithm distills representational similarity between the batch and a large set of other examples , maintained in an example queue Q.
As the number of target examples K can be much larger than the batch size , it allows distillation of richer information by regularizing similarities .
During pretraining , the method maintains a fixed - size queue exp(hi · hj /τ ) k=1 .. N exp(hi · hk /τ )
Bij = P N ( 1 ) N 1 X X t−1 ` distill = − Bij log Btij N ( 2 ) i=1 j=1 E.2 13 SEED Distillation  of distillation from every 1 batch to every r0 = 10 steps , while still replaying and distilling knowledge over 1 batch of memory examples every 10 training steps .
This results in Cf = ( 1 + 2 / k + 1 / k 0 ) b and Cb = ( 1 + 1 / k)b , where C = 2.4b when both r and r0 are 10 .
The approach is referred to as Sparse Logit - KD .
Finally , for SEED - Logit - KD , we remove the SimCSE loss from training and perform sparse distillation similar to Sparse - Logit - KD , which also results in C = 2.4b .
The performance of the models is presented in Table 8 .
We notice that at the end of pretraining , increasing the number of training steps in Sequential PT by 1.2 times does not lead to performance boost on the latest domain ( D4 ) , while the performance over tasks from earlier domains ( Chemprot , ACLARC , SciERC ) slightly dropped , possibly due to increased forgetting .
For ER , we notice replaying only slightly more frequently ( ERk=5 ) than the default setup ( k=10 ) greatly increased the perplexity of MLM , implying significantly increased overfitting to the memory ; while the performance differences of downstream tasks compared to the default ER is mixed .
When we decrease the replay frequency of distillation , the performance on LogitKD and SEED - KD also decreased and does not outperform ER .
The results show additional computation costs can be necessary for continual learning algorithms such as Logit - KD and SEED - Logit - KD .
However , the results also show that there is no simple tradeoff between computational cost and performance .
We have seen that it is not always beneficial to increase the number of training steps over the emerging data , as it increases forgetting in earlier domains .
Similarly , increasing the frequency of replay may lead to significant overfitting to the replay memory .
Investigating into more effective continual learning algorithms , despite increased computation costs , allows us to obtain performance improvement that can not be simply traded with more computation with arbitrary continual learning algorithms .
We leave more thorough studies into this topic as future work .
Q to cache examples from the current domain Dt .
Given a mini - batch of training examples x , it computes cosine similarity between each pair of examples within the batch x and Q with ft−1 and ft , resulting in two similarity matrices Bt−1 , Py ∈ R|B|×|Q| .
Similar to the contrastive distillation , the distillation loss is the cross - entropy between two similarity matrices Bt−1 and Bt computed in the same way as Eq . 2 .
F Analysis and Controlled Experiments of Computational Costs Computational cost is a crucial matter for online continual learning systems .
In this section , we analyze the computational costs of continual learning algorithms and perform controlled experiments of computational costs .
We quantify computational costs with the total number of forward ( Cf ) and backward ( Cb ) computations ( C = Cf + Cb ) over the PTLMs , which is easy to control ; in practice , we find the wall clock time of training was approximately linear to C.
We summarize the number of forward and backward passes and the wall clock time of training in Table 7 .
In the visit of b batches from the training stream , Sequential PT performs b forward and backward passes respectively over the PTLM , resulting in C = 2b .
Experience replay further replays 1 batch of examples every r steps over the training stream , which results in C = ( 2 + 2 / k)b .
In our main experiments , r is set to 10 ( Sec . 3.3 ) .
Logit - Distill and Rep - Distill require one additional forward pass over a frozen PTLM to compute the target of distillation , resulting in C = ( 3 + 3 / k)b .
Distillation algorithms that perform contrastive learning with SimCSE ( i.e. SEED - Distill and SEED - LogitDistill ) additionally require one forward and backward pass using the same batch of examples with different dropout masks .
Therefore , for SEEDLogit - Distill , C = ( 5 + 5 / k)b .
To control the number of forward and backward passes , we present approaches to compensate the lower computation costs compared to Distillation algorithms and one approach to shrink the computational cost of distillation algorithms : ( 1 ) for Sequential PT , we train the models for 1.2 times more steps so that C = 2.4b , noted as Sequential PTb0
= 1.2b ; ( 2 ) for ER , we increase the replay frequency k to 5 from the default setup 10 , so that C = 2.4b .
We also decrease the cost of Logit - KD and SEED - Logit - KD by reducing the frequency G Experiments with BERT on Tweet Stream After 2019
In this section , we present an additional set of experiments on BERT - base ( Devlin et al. , 2019 ) model , which is originally pretrained with Wikipedia articles before 2019 , with Tweets only after 2019 .
The 14  Method # . of Forward # . of Backward # .
Total # .
Total ( k=10 ) Wall Time4k
Main results Sequential PT ER Logit - Distill SEED - Logit - Distill b ( 1 + 1 / k)b ( 2 + 2 / k)b ( 3 + 3 / k)b b ( 1 + 1 / k)b ( 1 + 1 / k)b ( 2 + 2 / k)b 2b ( 2 + 2 / k)b ( 3 + 3 / k)b ( 5 + 5 / k)b 2b 2.2b 3.3b 5.5b 4.0 × 104 sec .
4.2 × 104 sec .
6.9 × 104 sec .
9.7 × 104 sec .
1.2b 1.2b
1.3b
1.3b
1.2b 1.2b 1.1b 1.1b
2.4b 2.4b 2.4b 2.4b 2.4b 2.4b 2.4b 2.4b 4.4 × 104 sec .
4.4 × 104 sec .
4.4 × 104 sec .
4.5 × 104 sec .
Additional Controlled Experiments Sequential PTb0 = 1.2b ERk=5 Sparse Logit - KD Sparse SEED - Logit - KD\contrast Table 7 : Number of forward and backward passes over PTLMs and wall clock time of different approaches .
The number of forward and backwards passes are computed over visits of b batches from the training data stream , where k is the frequency of replay .
The wall clock time is calculated over 4k steps of training ( which is the number of training steps of a single domain in the Research Paper stream ) excluding the first domain , as no replay or distillation happens while learning the first domain .
We use 2 Quadro RTX 8000 GPUs for training each model .
In the additional controlled experiments ( described in Appendix . F ) , we control the total number of forward and backward passes of different approaches .
This also yields approximately the same wall clock time for approaches .
Task D1 - Biomedical D2 - Computer Science D3 - Materials Science D4 - Physics Dataset Chemprot RCT - Sample MLM ACL - ARC SciERC MLM MNER
Synthesis MLM Keyphrase Hyponym MLM
Sequential Pretraining Sequential Pretrainingb0 = 1.2b ER ERk=5 Logit - KD - Sparse SEED - KD - Sparse 82.09±0.5 81.68±0.5
82.73±0.3 83.00±0.1 82.80±0.4
82.51±0.4 79.60±0.5
79.80±0.4
79.98±0.3
79.79±0.4
79.80±0.5 79.52±0.5 1.654 1.656 1.737 1.913 1.476 1.474 72.73±2.9
70.57±3.0 72.50±1.0 69.85±2.6 73.31±2.0 73.70±3.4 81.43±0.8 80.89±1.2 81.64±1.1 82.30±1.2 81.19±0.8 81.92±0.8 1.807 1.793 1.857 2.049 1.744 1.741 83.99±0.3 83.65±0.3 83.99±0.4
84.03±0.2 83.84±0.4
83.96±0.3 92.10±1.0 92.16±0.7 92.65±0.4 91.60±0.6
92.29±0.7 92.20±1.0 1.590 1.578 1.621 1.721 1.472 1.480 67.57±1.0 67.61±1.4 66.11±1.1
65.55±0.4
66.65±0.7 64.75±1.1 74.68±4.4 75.03±4.1 72.82±4.3 75.64±3.2 77.27±7.1 71.29±3.6 1.381 1.379 1.391 1.418 1.385 1.381 Table 8 : Performance of distillation algorithms in the setup of controlled computational costs .
Task 2019 - 1 2019 - 2 2020 - 1 2020 - 2 Task 2019 - 1→2019 - 2 Hashtag Prediction BERT - base Sequential PT ER Logit - KD SEED - Logit - KD 46.38±0.4 50.46±0.1 49.90±0.4
50.19±0.9
50.79±0.8
48.05±0.8 52.70±0.7 52.33±0.6 53.70±0.4 52.84±0.5 2019 - 1→2020 - 1 2019 - 1→2020 - 2 Hashtag Prediction 41.67±1.0 46.49±1.0 46.84±0.3 47.64±0.4 46.04±0.4 69.00±0.5 71.63±0.7 71.67±0.4 72.44±0.5 72.24±0.6 BERT - base Sequential PT ER Logit - KD SEED - Logit - KD Table 9 : Hashtag prediction performance of continually pre 40.19±0.3 43.30±0.7 42.96±0.9 43.35±1.6 43.56±0.4 41.00±0.6 48.60±2.1 46.07±1.6 46.91±0.5 45.77±0.7 40.85±0.8 44.07±0.8
44.26±0.7
45.03±0.2 43.76±0.5 Table 10 : Temporal generalization performance of Hash trained BERT models over tweets after 2019 .
tag prediction models fine - tuned from continually pretrained BERT models over tweets after 2019 .
training corpora D1 .. 4 consist of tweets from the first half of 2019 , the second half of 2019 , the first half of 2020 , and the second half of 2020 respectively .
We accordingly construct hashtag prediction and cross - year hashtag prediction datasets .
The performance of downstream tasks fine - tuned from the final pretrained model is presented in Table 9 .
We see Sequential PT clearly outperforms BERTbase which is not continually pretrained , and that Logit - KD generally improves hashtag prediction performance compared to Sequential PT except on the first half of 2019 .
We hypothesize the small temporal gap between D1 .. 4 makes improvements less significant than our main experiment setup .
We present temporal generalization performance in cross - year hashtag prediction tasks in Table 10 .
Similarly , Logit - KD improves over Sequential PT in two out of three cross - year hashtag prediction setups .
H Analysis of Data Streams In this section , we provide further analysis about the created research paper stream and the tweet stream .
We measure cosine distances dv of vocabulary distributions between each pair of different domains ( D1 .. 4 ) and summarize the results in Figure 7 .
The results indicate that the Tweet stream has a magnitude smaller vocabulary distribution gap between domains , which is in the scale of 1e−5 , compared to the research paper stream , which is in the scale of 1e−2 .
On the Tweet stream , we see the differences of vocabulary distributions align with the temporal gap between domains .
On the 15  Tweet Stream Research Paper Stream 2014 0.00e+00 9.92e-06 1.61e-05 2.03e-05 BioMed 0.00e+00 5.35e-02 1.28e-02
6.58e-02
0.00e+00 9.40e-06 2.54e-05 Materials
0.00e+00 2.97e-02 2018 0.00e+00 6.83e-06 Physics 0.00e+00 2020
0.00e+00 20 20 18 20 20 14 20 ( a ) Research Paper Stream 16 cs
ysi Ph ial ter Ma Bio s 2016 CS
0.00e+00 2.65e-02 1.17e-02 Me d CS ( b ) Tweet Stream Figure 7 : Cosine distance of vocabulary distributions between each pair of datasets in two data streams .
research paper stream , we find some domains to be more similar than others .
For example , Biomedical ( D1 ) and Material Science domains ( D3 ) have larger similarity in their vocabulary distributions , which explains general downstream performance increase on D1 after the model is pretrained on D3 ( Fig . 4 ( a , b ) ) .
The differences in vocabulary distribution explain inconsistency in results between two data streams , specifically , whether lifelong pretraining improves downstream model performance on the latest domain , as we mentioned in Sec . 4.3 .
Other than this , our main findings , such as the effect of distillation - based CL algorithms on reducing forgetting , are consistent over two datasets with such significant differences in their changes of vocabulary distribution .
We believe it implies the conclusions in this paper should be reliable in diverse data streams .
I Ethic Risks We would like to note that , in practice , continually pretrained models over real - world data streams would require identification and removal of biased contents from pretraining corpora , which may affect the prediction of downstream models .
As PTLMs are continuously updated , the bias in earlier pretraining may have a profound negative impact .
In future works , it is preferable to develop algorithms to “ forget ” certain biased knowledge from language models .
We further note that any data released in this paper , especially the tweet stream , should only be used for research purposes .
16 
